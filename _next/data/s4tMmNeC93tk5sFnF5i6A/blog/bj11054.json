{"pageProps":{"frontMatter":{"title":"백준 11054 파이썬","date":"2022-7-13","description":"백준 11054 파이썬 풀이","tags":["dp","algorithm"]},"slug":"bj11054","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"br\", {}), \"\\n\", _jsx(_components.h2, {\n      children: \"문제 링크\"\n    }), \"\\n\", _jsx(\"a\", {\n      href: \"https://www.acmicpc.net/problem/11054\",\n      target: \"_blank\",\n      children: \"https://www.acmicpc.net/problem/11054\"\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(_components.h2, {\n      children: \"풀이 방식\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Left -> Right로 증가하는 수와, Right -> Left로 증가하는 수를 Index별로 구한 후,\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"합을 구한다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"코드\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-python\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" bisect \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" bisect_left\\r\\nn = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"int\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"input\"\n        }), \"())\\r\\nnums = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"list\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"map\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"int\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"input\"\n        }), \"().split()))\\r\\ncnt = [\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"] * n\\r\\ntemp = [\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"float\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'inf'\"\n        }), \")] * n\\r\\n\\r\\nmax_idx = -\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"\\r\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" i \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"in\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"range\"\n        }), \"(n):\\r\\n    insert_idx = bisect_left(temp, nums[i])\\r\\n    temp[insert_idx] = nums[i]\\r\\n    max_idx = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"max\"\n        }), \"(max_idx, insert_idx)\\r\\n    cnt[i] += max_idx\\r\\n\\r\\nmax_idx = -\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"\\r\\ntemp = [\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"float\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'inf'\"\n        }), \")] * n\\r\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" i \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"in\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"range\"\n        }), \"(n - \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \", -\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \", -\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"):\\r\\n    insert_idx = bisect_left(temp, nums[i])\\r\\n    temp[insert_idx] = nums[i]\\r\\n    max_idx = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"max\"\n        }), \"(max_idx, insert_idx)\\r\\n    cnt[i] += max_idx\\r\\n\\r\\n\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"print\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"max\"\n        }), \"(cnt) + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \")\\n\"]\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}