{"pageProps":{"frontMatter":{"title":"백준 10986 파이썬","date":"2022-7-18","description":"백준 10986 파이썬 풀이","tags":["prefix sum","algorithm"]},"slug":"bj10986","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    ol: \"ol\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"br\", {}), \"\\n\", _jsx(_components.h2, {\n      children: \"문제 링크\"\n    }), \"\\n\", _jsx(\"a\", {\n      href: \"https://www.acmicpc.net/problem/10986\",\n      target: \"_blank\",\n      children: \"https://www.acmicpc.net/problem/10986\"\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(_components.h2, {\n      children: \"풀이 방식\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"구간 합을 구한다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"나머지가 같은 두 구간합은 나머지가 0인 것을 이용한다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"dict 구조를 이용하여 나머지가 0일 때 카운트를 한다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"코드\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-python\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" collections \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" defaultdict\\r\\n\\r\\nn, m = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"map\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"int\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"input\"\n        }), \"().split())\\r\\nnums = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"list\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"map\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"int\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"input\"\n        }), \"().split()))\\r\\nreminder = defaultdict(\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"int\"\n        }), \")\\r\\nreminder[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"] = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"\\r\\npre_sum = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"\\r\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" i \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"in\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"range\"\n        }), \"(n):\\r\\n    pre_sum = (pre_sum + nums[i]) % m\\r\\n    nums[i] = pre_sum\\r\\n\\r\\ncnt = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"\\r\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" num \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"in\"\n        }), \" nums:\\r\\n    cnt += reminder[num]\\r\\n    reminder[num] += \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"\\r\\n\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"print\"\n        }), \"(cnt)\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"후기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"구간 합 유형은 난이도 있는 문제에 속한다. 구간 합 개념을 알고 있으면 풀 수 있는 문제가 많이 생기는 것 같다.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}