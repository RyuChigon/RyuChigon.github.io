{"pageProps":{"frontMatter":{"title":"백준 14428 파이썬","date":"2022-7-12","description":"백준 14428 파이썬 풀이","tags":["segment Tree","algorithm"]},"slug":"bj14428","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"br\", {}), \"\\n\", _jsx(_components.h2, {\n      children: \"문제 링크\"\n    }), \"\\n\", _jsx(\"a\", {\n      href: \"https://www.acmicpc.net/problem/14428\",\n      target: \"_blank\",\n      children: \"https://www.acmicpc.net/problem/14428\"\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(_components.h2, {\n      children: \"풀이 방식\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"구간 별 최솟값을 구하는 문제이다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"구간 별 최솟값, 합을 구하는 문제에서 유용하게 사용하는 구조는 세그먼트 트리(Segment Tree)이다.\"\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(_components.h2, {\n      children: \"코드\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-python\",\n        children: [\"size = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"\\r\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"while\"\n        }), \" size < n:\\r\\n    size *= \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \"\\r\\ntree = [(\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"float\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'inf'\"\n        }), \"), \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"float\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'inf'\"\n        }), \"))] * (size * \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \")\\r\\nnums = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"map\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"int\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"input\"\n        }), \"().split())\\r\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" i, num \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"in\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"enumerate\"\n        }), \"(nums):\\r\\n    tree[size + i] = (num, i + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \")\\r\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" i \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"in\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"range\"\n        }), \"(size - \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \", -\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"):\\r\\n    tree[i] = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"min\"\n        }), \"(tree[i * \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \"], tree[i * \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \" + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"])\\r\\n\\r\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"def\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"modify\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"idx, value, size\"\n        }), \"):\\r\\n    curr_idx = size + idx - \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"\\r\\n    tree[curr_idx] = (value, idx)\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"while\"\n        }), \" curr_idx > \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \":\\r\\n        curr_idx //= \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \"\\r\\n        tree[curr_idx] = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"min\"\n        }), \"(tree[curr_idx * \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \"], tree[curr_idx * \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \" + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"])\\r\\n\\r\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"def\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get_min\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"left, right, start, end, idx\"\n        }), \"):\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" left > end \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"or\"\n        }), \" right < start:\\r\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"float\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'inf'\"\n        }), \"), \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"float\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'inf'\"\n        }), \"))\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" left <= start \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"and\"\n        }), \" right >= end:\\r\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" tree[idx]\\r\\n    mid = (start + end) // \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \"\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"min\"\n        }), \"(get_min(left, right, start, mid, idx * \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \"), get_min(left, right, mid + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \", end, idx * \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \" + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"))\\r\\n\\r\\nm = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"int\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"input\"\n        }), \"())\\r\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" _ \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"in\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"range\"\n        }), \"(m):\\r\\n    mode, a, b = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"map\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"int\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"input\"\n        }), \"().split())\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" mode == \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \":\\r\\n        modify(a, b, size)\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"elif\"\n        }), \" mode == \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \":\\r\\n        \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"print\"\n        }), \"(get_min(a, b, \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \", size, \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \")[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"])\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"유사 문제\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"구간 합 구하는 문제이다.\"\n    }), \"\\n\", _jsx(\"a\", {\n      href: \"https://www.acmicpc.net/problem/11659\",\n      target: \"_blank\",\n      children: \"https://www.acmicpc.net/problem/11659\"\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(\"a\", {\n      href: \"https://www.acmicpc.net/problem/2042\",\n      target: \"_blank\",\n      children: \"https://www.acmicpc.net/problem/2042\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"11659 번은 Input 범위가 \", _jsx(_components.code, {\n        children: \"1 <= N <= 100,000\"\n      }), \", \", _jsx(_components.code, {\n        children: \"1 <= M <= 100,000\"\n      }), \"로 Dp를 통해 문제를 해결할 수 있다.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"하지만 2042번의 경우 같은 문제이지만 범위가 훨씬 확장되고, 값 수정까지 있어 Dp를 이용한다면 시간 초과가 된다.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"반면, 세그먼트 트리를 이용해서 풀 경우 \", _jsx(_components.code, {\n        children: \"O(NlogN)\"\n      }), \" 시간복잡도를 가져서 문제를 해결할 수 있다.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}